name: Create Release (Apps & Source)

on:
  push:
    branches: [master]

jobs:
  create_release:
    name: Create release
    if: "startsWith(github.event.head_commit.message, 'Release')"
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      current-version: ${{ steps.package-version.outputs.current-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get commit-messages
        id: get_messages
        run: |
          git log --pretty=format:"+ %s" $(git describe --tags --abbrev=0 @^)..@ >> /tmp/messages.txt
          cp /tmp/messages.txt .messages.md
          cat /tmp/messages.txt
          echo 'MESSAGES<<EOF' >> $GITHUB_ENV
          printf '%b\n' "$(cat /tmp/messages.txt)" >> $GITHUB_ENV
          echo EOF >> $GITHUB_ENV
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master
      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: Install Node Modules
        run: yarn
      - name: Build project
        env:
          release_version: ${{ steps.package-version.outputs.current-version}}
          REACT_APP_VERSION: ${{ steps.package-version.outputs.current-version}}
        run: yarn build
      - name: Preparing Archive
        run: |
          mv build frontend_v3
          printf "${{ env.MESSAGES }}" >> frontend_v3/messages.md
      - name: Create Archive
        uses: thedoctor0/zip-release@master
        with:
          filename: "frontend_v3.zip"
          path: "frontend_v3"
          exclusions: "*.git* /*node_modules/* .editorconfig"
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.package-version.outputs.current-version}}
          release_name: Release ${{ steps.package-version.outputs.current-version}}
          body: |
            ledfx_frontend_v3
            ${{ env.MESSAGES }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./frontend_v3.zip
          asset_name: frontend_v3.zip
          asset_content_type: application/zip

  build_apps:
    name: Build & Release Standalone Apps
    if: "startsWith(github.event.head_commit.message, 'Release')"
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [16.x]

        os: [macos-latest, ubuntu-latest, windows-latest]
        # os: [ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            OSNAME: mac
            OSEND: dmg
            FILEPART: Installer
          - os: ubuntu-latest
            OSNAME: linux
            OSEND: AppImage
            FILEPART: Installer

          - os: windows-latest
            OSNAME: win
            OSEND: exe
            FILEPART: Setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Node Modules
        run: yarn

      - name: Build Non-Win project
        if: matrix.OSNAME != 'win'
        env:
          release_version: ${{ steps.package-version.outputs.current-version}}
          VITE_VERSION: ${{ steps.package-version.outputs.current-version}}
        run: GH_TOKEN=${{secrets.GH_TOKEN}} yarn dist -p "never"

      - name: Build Win project
        if: matrix.OSNAME == 'win'
        env:
          release_version: ${{ steps.package-version.outputs.current-version}}
          VITE_VERSION: ${{ steps.package-version.outputs.current-version}}
        run: set GH_TOKEN=${{secrets.GH_TOKEN}} && yarn dist -p "never"

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./release/${{ needs.create_release.outputs.current-version}}/ledfx_frontend_v3-${{ needs.create_release.outputs.current-version}}-${{matrix.FILEPART}}.${{matrix.OSEND}}
          asset_name: ledfx_frontend_v3-${{ needs.create_release.outputs.current-version}}-${{matrix.FILEPART}}-${{matrix.OSNAME}}.${{matrix.OSEND}}
          asset_content_type: application/${{matrix.OSEND}}
